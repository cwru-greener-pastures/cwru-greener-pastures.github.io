#!/bin/bash

# This scrpit was generated by Google Gemini.  It worked as expected but was not tested with usernames and passwords as required by the VT Greener Pastures MQTT server.

# This script subscribes to an MQTT topic and republishes received messages to another topic.

# --- Configuration ---
# MQTT Broker Address for Subscription (e.g., localhost, 192.168.1.100, test.mosquitto.org)
SUBSCRIBE_MQTT_BROKER="localhost"
# MQTT Broker Port for Subscription (default is 1883 for unencrypted, 8883 for SSL/TLS)
SUBSCRIBE_MQTT_PORT="1883"
SUBSCRIBE_MQTT_USERNAME=""
SUBSCRIBE_MQTT_PASSWORD=""

# MQTT Broker Address for Publication
PUBLISH_MQTT_BROKER="localhost"
# MQTT Broker Port for Publication
PUBLISH_MQTT_PORT="1883"
PUBLISH_MQTT_USERNAME=""
PUBLISH_MQTT_PASSWORD=""

# Topics
SUBSCRIBE_TOPIC=""  # Topic to subscribe to
PUBLISH_TOPIC=""    # Topic to publish to

# --- Usage Function ---
usage() {
    echo "Usage: $0 -s <subscribe_topic> -p <publish_topic> [OPTIONS]"
    echo ""
    echo "Required:"
    echo "  -s <subscribe_topic> : The MQTT topic to subscribe to."
    echo "  -p <publish_topic>   : The MQTT topic to publish messages to."
    echo ""
    echo "Subscription Broker Options:"
    echo "  -i <sub_broker_host> : The MQTT broker hostname or IP for subscription (default: $SUBSCRIBE_MQTT_BROKER)."
    echo "  -I <sub_broker_port> : The MQTT broker port for subscription (default: $SUBSCRIBE_MQTT_PORT)."
    echo "  -u <sub_username>    : Username for subscription broker (optional)."
    echo "  -P <sub_password>    : Password for subscription broker (optional)."
    echo ""
    echo "Publication Broker Options:"
    echo "  -o <pub_broker_host> : The MQTT broker hostname or IP for publication (default: $PUBLISH_MQTT_BROKER)."
    echo "  -O <pub_broker_port> : The MQTT broker port for publication (default: $PUBLISH_MQTT_PORT)."
    echo "  -U <pub_username>    : Username for publication broker (optional)."
    echo "  -X <pub_password>    : Password for publication broker (optional)."
    echo ""
    echo "Other Options:"
    echo "  -H                   : Display this help message."
    exit 1
}

# --- Parse Command Line Arguments ---
while getopts "s:p:i:I:u:P:o:O:U:X:H" opt; do
    case ${opt} in
        s )
            SUBSCRIBE_TOPIC=$OPTARG
            ;;
        p )
            PUBLISH_TOPIC=$OPTARG
            ;;
        i )
            SUBSCRIBE_MQTT_BROKER=$OPTARG
            ;;
        I )
            SUBSCRIBE_MQTT_PORT=$OPTARG
            ;;
        u )
            SUBSCRIBE_MQTT_USERNAME=$OPTARG
            ;;
        P ) # Note: 'P' is used for subscribe password, 'X' for publish password
            SUBSCRIBE_MQTT_PASSWORD=$OPTARG
            ;;
        o )
            PUBLISH_MQTT_BROKER=$OPTARG
            ;;
        O )
            PUBLISH_MQTT_PORT=$OPTARG
            ;;
        U )
            PUBLISH_MQTT_USERNAME=$OPTARG
            ;;
        X )
            PUBLISH_MQTT_PASSWORD=$OPTARG
            ;;
        H )
            usage
            ;;
        \? )
            echo "Invalid option: -$OPTARG" >&2
            usage
            ;;
        : )
            echo "Option -$OPTARG requires an argument." >&2
            usage
            ;;
    esac
done
shift $((OPTIND -1))

# --- Validate Required Arguments ---
if [ -z "$SUBSCRIBE_TOPIC" ] || [ -z "$PUBLISH_TOPIC" ]; then
    echo "Error: Both subscribe topic (-s) and publish topic (-p) are required." >&2
    usage
fi

# --- Construct authentication flags ---
# For mosquitto_sub
SUB_AUTH_FLAGS=""
if [ -n "$SUBSCRIBE_MQTT_USERNAME" ]; then
    SUB_AUTH_FLAGS="-u \"$SUBSCRIBE_MQTT_USERNAME\""
    if [ -n "$SUBSCRIBE_MQTT_PASSWORD" ]; then
        SUB_AUTH_FLAGS="$SUB_AUTH_FLAGS -P \"$SUBSCRIBE_MQTT_PASSWORD\""
    fi
fi

# For mosquitto_pub
PUB_AUTH_FLAGS=""
if [ -n "$PUBLISH_MQTT_USERNAME" ]; then
    PUB_AUTH_FLAGS="-u \"$PUBLISH_MQTT_USERNAME\""
    if [ -n "$PUBLISH_MQTT_PASSWORD" ]; then
        PUB_AUTH_FLAGS="$PUB_AUTH_FLAGS -P \"$PUBLISH_MQTT_PASSWORD\""
    fi
fi


echo "--- MQTT Message Bridge Started ---"
echo "Subscribe Broker: $SUBSCRIBE_MQTT_BROKER:$SUBSCRIBE_MQTT_PORT"
echo "Subscribe Topic:  $SUBSCRIBE_TOPIC"
if [ -n "$SUBSCRIBE_MQTT_USERNAME" ]; then
    echo "  (Sub Username: $SUBSCRIBE_MQTT_USERNAME)"
fi
echo "Publish Broker:   $PUBLISH_MQTT_BROKER:$PUBLISH_MQTT_PORT"
echo "Publish Topic:    $PUBLISH_TOPIC"
if [ -n "$PUBLISH_MQTT_USERNAME" ]; then
    echo "  (Pub Username: $PUBLISH_MQTT_USERNAME)"
fi
echo "-----------------------------------"
echo ""

# --- Main Logic ---
# mosquitto_sub subscribes to the topic and outputs messages to stdout.
# The `while read message` loop reads each line (message) from mosquitto_sub's output.
# mosquitto_pub then publishes that message to the specified publish topic.
# Using 'eval' for auth flags because of potential spaces/quotes in username/password
eval mosquitto_sub -h "$SUBSCRIBE_MQTT_BROKER" -p "$SUBSCRIBE_MQTT_PORT" -t "$SUBSCRIBE_TOPIC" $SUB_AUTH_FLAGS | \
while IFS= read -r message; do
    echo "Received: '$message' on topic '$SUBSCRIBE_TOPIC' from $SUBSCRIBE_MQTT_BROKER:$SUBSCRIBE_MQTT_PORT"
    echo "Publishing: '$message' to topic '$PUBLISH_TOPIC' on $PUBLISH_MQTT_BROKER:$PUBLISH_MQTT_PORT"
    # Publish the received message
    eval mosquitto_pub -h "$PUBLISH_MQTT_BROKER" -p "$PUBLISH_MQTT_PORT" -t "$PUBLISH_TOPIC" -m "$message" $PUB_AUTH_FLAGS
done

echo "MQTT Message Bridge stopped."
